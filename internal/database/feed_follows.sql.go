// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const insertFeedFollow = `-- name: InsertFeedFollow :one

WITH inserted_feed_follow AS (
    INSERT INTO feed_follows (feed_id, user_id)
    VALUES (
        $1,
        $2
    )
    ON CONFLICT DO NOTHING
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT
    inserted_feed_follow.id, inserted_feed_follow.created_at, inserted_feed_follow.updated_at, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
    feeds.name AS feed_name,
    users.name AS user_name
FROM inserted_feed_follow
INNER JOIN feeds on feeds.id = inserted_feed_follow.feed_id
INNER JOIN users on users.id = inserted_feed_follow.user_id
`

type InsertFeedFollowParams struct {
	FeedID uuid.UUID
	UserID uuid.UUID
}

type InsertFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	FeedName  string
	UserName  string
}

func (q *Queries) InsertFeedFollow(ctx context.Context, arg InsertFeedFollowParams) (InsertFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, insertFeedFollow, arg.FeedID, arg.UserID)
	var i InsertFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}
