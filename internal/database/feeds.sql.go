// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :one
INSERT INTO feeds (user_id, url, name)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id, user_id, url, name
`

type AddFeedParams struct {
	UserID uuid.UUID
	Url    string
	Name   string
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, addFeed, arg.UserID, arg.Url, arg.Name)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.Name,
	)
	return i, err
}

const getFeedID = `-- name: GetFeedID :one

SELECT id
FROM feeds
WHERE feeds.url = $1
`

func (q *Queries) GetFeedID(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFeedID, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT
    f.name AS feed_name,
    u.name AS user_name,
    f.url
FROM feeds f
JOIN users u ON f.user_id = u.id
`

type GetFeedsRow struct {
	FeedName string
	UserName string
	Url      string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.FeedName, &i.UserName, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
